from flask import Flask, render_template, request, jsonify
import pandas as pd
import os

app = Flask(__name__)
DATA_FILE = "data.csv"

# Load symptom data from existing CSV
def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    df = pd.read_csv(DATA_FILE)
    df.columns = df.columns.str.strip().str.lower()
    symptom_data = {}
    for _, row in df.iterrows():
        symptom = str(row["symptom"]).lower().strip()
        conditions = [c.strip().lower() for c in str(row["conditions"]).split(",")]
        symptom_data[symptom] = conditions
    return symptom_data

# Save new symptom-condition mapping
def save_new_mapping(symptom, condition):
    symptom = symptom.strip().lower()
    condition = condition.strip().lower()
    if os.path.exists(DATA_FILE):
        df = pd.read_csv(DATA_FILE)
        df.columns = df.columns.str.strip().str.lower()
    else:
        df = pd.DataFrame(columns=["symptom", "conditions"])

    existing_symptoms = df["symptom"].str.lower().str.strip().tolist()
    if symptom in existing_symptoms:
        idx = df[df["symptom"].str.lower().str.strip() == symptom].index[0]
        existing_conditions = set(str(df.at[idx, "conditions"]).split(","))
        existing_conditions.add(condition)
        df.at[idx, "conditions"] = ",".join(existing_conditions)
    else:
        new_row = pd.DataFrame({"symptom": [symptom], "conditions": [condition]})
        df = pd.concat([df, new_row], ignore_index=True)
    df.to_csv(DATA_FILE, index=False)
    print(f"Saved mapping: {symptom} -> {condition}")

# Load existing data
symptom_data = load_data()

# Flask routes
@app.route("/")
def home():
    return render_template("index.html")
@app.route("/chat", methods=["POST"])
def chat():
    global symptom_data
    user_input = request.json.get("message", "").lower().strip()
    print("User input:", user_input)

    response = []
    known_conditions = []

    # 1Ô∏è‚É£ Check existing symptoms and conditions
    for symptom, conditions in symptom_data.items():
        if symptom in user_input:
            response.extend(conditions)
            known_conditions.extend(conditions)
        for condition in conditions:
            if condition in user_input:
                response.append(symptom)
                known_conditions.append(condition)

    # 2Ô∏è‚É£ Auto-learn unknown words/phrases
    words = [w.strip() for w in user_input.split() if w.isalpha()]
    for w in words:
        if w not in symptom_data and known_conditions:
            save_new_mapping(w, known_conditions[0])
            response.append(known_conditions[0])

    # Reload dataset once
    symptom_data = load_data()

    # 3Ô∏è‚É£ Always return a reply
    if not response:
        reply_text = "ü§ñ I‚Äôm not sure. Please consult a doctor."
    else:
        reply_text = f"Possible related conditions/symptoms: {', '.join(set(response))}"

    return jsonify({"reply": reply_text})

if __name__ == "__main__":
    app.run(port=5000, debug=True)
